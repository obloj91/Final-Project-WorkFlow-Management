{"ast":null,"code":"var _jsxFileName = \"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/DataContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/React.createContext(null);\nexport const DataContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [allUsers, setAllUsers] = useState(); //state that contains an array of  all users \n\n  const [status, setStatus] = useState(\"loading\"); //default loading state\n\n  const [loginData, setLoginData] = useState({\n    password: \"\",\n    username: \"\"\n  }); //used to store the data from input fields at login\n\n  const [currentLoggedUser, setCurrentLoggedUser] = useState(null); //used to store current logged User Data\n\n  const [admin, setAdmin] = useState(null); //state that stores receive Admin Data from server\n  //creatign a useEffect that will execute the GET methods on mount and anytime there's a change in the data\n\n  useEffect(() => {\n    //getting the users array from the server\n    fetch(\"/users\", {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(response => {\n      setStatus(\"idle\"); // setting the status to idle as data is loaded\n\n      return setAllUsers(response.data); //setting the received data into the users state\n    }).catch(error => console.log(\"ERROR: \", error));\n  }, []); // executes on mount (or each time page reloads)\n\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      allUsers,\n      setAllUsers,\n      status,\n      setStatus,\n      loginData,\n      setLoginData,\n      currentLoggedUser,\n      setCurrentLoggedUser,\n      admin,\n      setAdmin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DataContextProvider, \"alSWScUss/pIYAwA64Y3ke2+Xl4=\");\n\n_c = DataContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataContextProvider\");","map":{"version":3,"sources":["/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/DataContext.js"],"names":["React","useEffect","useState","DataContext","createContext","DataContextProvider","children","allUsers","setAllUsers","status","setStatus","loginData","setLoginData","password","username","currentLoggedUser","setCurrentLoggedUser","admin","setAdmin","fetch","method","headers","Accept","then","res","json","response","data","catch","error","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;;AACA,OAAO,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB,IAApB,CAApB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,QAAe;AAAA;;AAAA,MAAd;AAACC,IAAAA;AAAD,GAAc;AAClD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,EAAxC,CADkD,CACP;;AAC3C,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,SAAD,CAApC,CAFkD,CAEF;;AAChD,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC;AAACW,IAAAA,QAAQ,EAAE,EAAX;AAAeC,IAAAA,QAAQ,EAAE;AAAzB,GAAD,CAA1C,CAHkD,CAGwB;;AAC1E,QAAK,CAACC,iBAAD,EAAoBC,oBAApB,IAA4Cd,QAAQ,CAAC,IAAD,CAAzD,CAJkD,CAIc;;AAChE,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,IAAD,CAAlC,CALkD,CAKT;AAEzC;;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV;AACAkB,IAAAA,KAAK,CAAC,QAAD,EAAW;AACZC,MAAAA,MAAM,EAAC,KADK;AAEZC,MAAAA,OAAO,EAAC;AACRC,QAAAA,MAAM,EAAE,kBADA;AAER,wBAAgB;AAFR;AAFI,KAAX,CAAL,CAKCC,IALD,CAKOC,GAAD,IAAOA,GAAG,CAACC,IAAJ,EALb,EAMCF,IAND,CAMOG,QAAD,IAAY;AACdhB,MAAAA,SAAS,CAAC,MAAD,CAAT,CADc,CACI;;AACpB,aAAOF,WAAW,CAACkB,QAAQ,CAACC,IAAV,CAAlB,CAFgB,CAEkB;AACnC,KATD,EAUCC,KAVD,CAUQC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB,CAVlB;AAYC,GAdI,EAcH,EAdG,CAAT,CARkD,CAsBxC;;AAGN,sBAEI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAI;AACvBtB,MAAAA,QADuB;AACbC,MAAAA,WADa;AACAC,MAAAA,MADA;AACQC,MAAAA,SADR;AAEvBC,MAAAA,SAFuB;AAEZC,MAAAA,YAFY;AAECG,MAAAA,iBAFD;AAGvBC,MAAAA,oBAHuB;AAGDC,MAAAA,KAHC;AAGMC,MAAAA;AAHN,KAA/B;AAAA,cAKKZ;AALL;AAAA;AAAA;AAAA;AAAA,UAFJ;AAUH,CAnCM;;GAAMD,mB;;KAAAA,mB","sourcesContent":["import React, {useEffect,useState} from \"react\";\r\nexport const DataContext = React.createContext(null);\r\n\r\nexport const DataContextProvider = ({children}) =>{\r\nconst [allUsers, setAllUsers] = useState();//state that contains an array of  all users \r\nconst [status, setStatus] = useState(\"loading\");//default loading state\r\nconst [loginData, setLoginData] = useState({password: \"\", username: \"\"}); //used to store the data from input fields at login\r\nconst[currentLoggedUser, setCurrentLoggedUser] = useState(null);//used to store current logged User Data\r\nconst [admin, setAdmin] = useState(null);//state that stores receive Admin Data from server\r\n\r\n//creatign a useEffect that will execute the GET methods on mount and anytime there's a change in the data\r\nuseEffect(()=>{\r\n    //getting the users array from the server\r\n    fetch(\"/users\", {\r\n        method:\"GET\",\r\n        headers:{\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",},})\r\n    .then((res)=>res.json())\r\n    .then((response)=>{\r\n        setStatus(\"idle\") // setting the status to idle as data is loaded\r\n      return setAllUsers(response.data) //setting the received data into the users state\r\n    })\r\n    .catch((error) => console.log(\"ERROR: \", error));\r\n    \r\n    },[]) // executes on mount (or each time page reloads)\r\n\r\n\r\n    return (\r\n\r\n        <DataContext.Provider value = {{\r\n                allUsers, setAllUsers, status, setStatus,\r\n                loginData, setLoginData,currentLoggedUser, \r\n                setCurrentLoggedUser, admin, setAdmin,\r\n        }}>\r\n            {children}\r\n        </DataContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}