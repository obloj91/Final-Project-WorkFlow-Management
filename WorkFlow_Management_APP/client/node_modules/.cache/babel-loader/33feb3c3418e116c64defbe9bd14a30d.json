{"ast":null,"code":"var _jsxFileName = \"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/DataContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/React.createContext(null);\nexport const DataContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [allUsers, setAllUsers] = useState(); //state that contains an array of  all users\n\n  const [allTasks, setAllTasks] = useState(null); //state that contains all tasks from DB\n\n  const [allProjects, setAllProjects] = useState(null); //state that contains all tasks from DB\n\n  const [status, setStatus] = useState(\"loading\"); //default loading state\n\n  const [loginData, setLoginData] = useState({\n    password: \"\",\n    username: \"\"\n  }); //used to store the data from input fields at login\n\n  const [currentLoggedUser, setCurrentLoggedUser] = useState(null); //used to store current logged User Data\n\n  const [admin, setAdmin] = useState(null); //state that stores receive Admin Data from server\n\n  const [updateTaskStatus, setUpdateTaskStatus] = useState(false); //we use this state to know when to relaunch useEffect for get tasks and get project by ID\n  //creatign a useEffect that will execute the GET methods on mount and anytime there's a change in the data\n\n  useEffect(() => {\n    //getting the users array from the server\n    fetch(\"/users\", {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(response => {\n      setStatus(\"idle\"); // setting the status to idle as data is loaded\n\n      return setAllUsers(response.data); //setting the received data into the users state\n    }).catch(error => console.log(\"ERROR: \", error)); //getting the TASKS array from the server\n\n    fetch(\"/projects\", {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(response => {\n      setStatus(\"idle\"); // setting the status to idle as data is loaded\n\n      return setAllProjects(response.data); //setting the received data into the users state\n    }).catch(error => console.log(\"ERROR: \", error));\n  }, []); // executes on mount (or each time page reloads)\n  //get Tasks will excecute on mount and when updateTaskStatus changes\n  // so when user clicks update on a task, this is to render the changes\n  // on the Project task page without having to refresh the page manually each time\n\n  useEffect(() => {\n    //getting the TASKS array from the server\n    fetch(\"/tasks\", {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(response => {\n      setStatus(\"idle\"); // setting the status to idle as data is loaded\n\n      return setAllTasks(response.data); //setting the received data into the users state\n    }).catch(error => console.log(\"ERROR: \", error));\n  }, [updateTaskStatus]);\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      allUsers,\n      setAllUsers,\n      status,\n      setStatus,\n      loginData,\n      setLoginData,\n      currentLoggedUser,\n      setCurrentLoggedUser,\n      admin,\n      setAdmin,\n      allTasks,\n      setAllTasks,\n      allProjects,\n      setAllProjects,\n      updateTaskStatus,\n      setUpdateTaskStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataContextProvider, \"4F7+TMXWzFAdD2Rat81qfw4ACBk=\");\n\n_c = DataContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataContextProvider\");","map":{"version":3,"sources":["/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/DataContext.js"],"names":["React","useEffect","useState","DataContext","createContext","DataContextProvider","children","allUsers","setAllUsers","allTasks","setAllTasks","allProjects","setAllProjects","status","setStatus","loginData","setLoginData","password","username","currentLoggedUser","setCurrentLoggedUser","admin","setAdmin","updateTaskStatus","setUpdateTaskStatus","fetch","method","headers","Accept","then","res","json","response","data","catch","error","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nexport const DataContext = React.createContext(null);\r\n\r\nexport const DataContextProvider = ({ children }) => {\r\n  const [allUsers, setAllUsers] = useState(); //state that contains an array of  all users\r\n  const [allTasks, setAllTasks] = useState(null); //state that contains all tasks from DB\r\n  const [allProjects, setAllProjects] = useState(null); //state that contains all tasks from DB\r\n  const [status, setStatus] = useState(\"loading\"); //default loading state\r\n  const [loginData, setLoginData] = useState({ password: \"\", username: \"\" }); //used to store the data from input fields at login\r\n  const [currentLoggedUser, setCurrentLoggedUser] = useState(null); //used to store current logged User Data\r\n  const [admin, setAdmin] = useState(null); //state that stores receive Admin Data from server\r\n  const [updateTaskStatus, setUpdateTaskStatus] = useState(false); //we use this state to know when to relaunch useEffect for get tasks and get project by ID\r\n\r\n  //creatign a useEffect that will execute the GET methods on mount and anytime there's a change in the data\r\n  useEffect(() => {\r\n    //getting the users array from the server\r\n    fetch(\"/users\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        setStatus(\"idle\"); // setting the status to idle as data is loaded\r\n        return setAllUsers(response.data); //setting the received data into the users state\r\n      })\r\n      .catch((error) => console.log(\"ERROR: \", error));\r\n\r\n    //getting the TASKS array from the server\r\n    fetch(\"/projects\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        setStatus(\"idle\"); // setting the status to idle as data is loaded\r\n        return setAllProjects(response.data); //setting the received data into the users state\r\n      })\r\n      .catch((error) => console.log(\"ERROR: \", error));\r\n  }, []); // executes on mount (or each time page reloads)\r\n\r\n  //get Tasks will excecute on mount and when updateTaskStatus changes\r\n  // so when user clicks update on a task, this is to render the changes\r\n  // on the Project task page without having to refresh the page manually each time\r\n  useEffect(() => {\r\n    //getting the TASKS array from the server\r\n    fetch(\"/tasks\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        setStatus(\"idle\"); // setting the status to idle as data is loaded\r\n        return setAllTasks(response.data); //setting the received data into the users state\r\n      })\r\n      .catch((error) => console.log(\"ERROR: \", error));\r\n  }, [updateTaskStatus]);\r\n\r\n  return (\r\n    <DataContext.Provider\r\n      value={{\r\n        allUsers,\r\n        setAllUsers,\r\n        status,\r\n        setStatus,\r\n        loginData,\r\n        setLoginData,\r\n        currentLoggedUser,\r\n        setCurrentLoggedUser,\r\n        admin,\r\n        setAdmin,\r\n        allTasks,\r\n        setAllTasks,\r\n        allProjects,\r\n        setAllProjects,\r\n        updateTaskStatus,\r\n        setUpdateTaskStatus,\r\n      }}\r\n    >\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}