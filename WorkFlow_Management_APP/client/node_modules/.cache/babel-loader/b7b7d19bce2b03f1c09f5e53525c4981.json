{"ast":null,"code":"var _jsxFileName = \"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/AdminLogin.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport backgroundImage from \"../assets/background2.png\";\nimport { DataContext } from \"./DataContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar bcrypt = require(\"bcryptjs\");\n\nconst AdminLogin = () => {\n  _s();\n\n  let navigate = useNavigate();\n  const {\n    loginData,\n    setLoginData,\n    setStatus\n  } = useContext(DataContext);\n  const [admin, setAdmin] = useState(); //state that stores receive Admin Data from server\n  //setting the name of the inputs and values as what is written inside inputs\n\n  const handleChange = (value, name) => {\n    setLoginData({ ...loginData,\n      [name]: value\n    });\n  }; // //verify username and password function\n  //   async function checkUser(databaseUsername,inputUsername, dataBasePassword, inputPassword) {\n  //     //... fetch user from a db etc.\n  //   const checkPassword = await bcrypt.compare(inputPassword, dataBasePassword);\n  //     if(checkPassword===true && (inputUsername === databaseUsername) ) {\n  //         //if loginfo checks out we navigate to the Admin HomePage\n  //         navigate(\"/adminHome\");\n  //     } else{\n  //       window.alert(\"Username or password is invalid!\");\n  //     }}\n\n\n  useEffect(() => {\n    // TODO: get seating data for selected flight\n    let isApiSubscribed = true; //this is used for cleanup function , to mount and unmount\n\n    if (isApiSubscribed) {\n      const fetchAdmin = async () => {\n        //get the data from our api, endpoint is expecting :flight, so we provided the selected flight(from dropdown menu)\n        const res = await fetch(\"/users/type/admin\"); //const res = await fetch(\"/flights/SA231\")\n        //converting the received data to JSON\n\n        const receivedJSON = await res.json(); //deconstructing response\n        //we then set the state with the received data\n\n        setAdmin(receivedJSON.data); //setting the received data into the users state\n\n        setStatus(\"idle\"); // setting the status to idle as data is loaded\n      }; //calling the function\n\n\n      fetchAdmin() //catching any errors if returned\n      .catch(error => console.log(\"ERROR : \", error));\n    }\n\n    return () => {\n      // cancel the subscription, unmounting\n      isApiSubscribed = false;\n    };\n  }, []); //on submit we get the hashed password from DB and compare to what we inputed in the password field\n\n  function handleSubmit(ev) {\n    ev.preventDefault(); //prevents the page from refreshing if submit unsuccesfull\n\n    bcrypt.compare(loginData.password, admin[0].password, function (err, result) {\n      // result == true\n      console.log(result);\n\n      if (result) {\n        navigate(\"/adminHome\", {\n          replace: true\n        }); //repalce should clear the history..not sure if it works\n      } else {\n        window.alert(\"Invalid Username or Password!\");\n      }\n    }); //     const settings = {\n    //       method: 'GET',\n    //       headers: {\n    //       Accept: 'application/json',\n    //      'Content-Type': 'application/json',\n    //       }\n    // }\n    // fetch(\"/users/type/admin\", settings)\n    // .then((res)=>res.json())\n    // .then((response)=>{\n    // const {status, message, data} = response; //deconstructing response\n    // setAdmin(data); //setting the received data into the users state\n    // setStatus(\"idle\"); // setting the status to idle as data is loaded\n    // bcrypt.compare(loginData.password, admin[0].password).then((res) => {\n    //   // res === true\n    //   navigate(\"/adminHome\");\n    // });\n    // // if(status==200 && status === \"idle\"){\n    // //   //we call the function to verify login admin information\n    // //   checkUser(loginData.username, admin[0].username, admin[0].password, loginData.Password);\n    // //   }\n    // //  else if(status === 404){\n    // //       console.log(message)\n    // //   }\n    // })\n    // .catch((error) => console.log(\"ERROR: \", error)); \n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: /*#__PURE__*/_jsxDEV(FormWrapper, {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          name: \"username\",\n          placeholder: \"Username\",\n          required: true,\n          onChange: ev => handleChange(ev.target.value, \"username\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"password\",\n          name: \"password\",\n          placeholder: \"Password\",\n          required: true,\n          onChange: ev => handleChange(ev.target.value, \"password\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SubmitInput, {\n          type: \"submit\",\n          value: \"Login\",\n          disabled: !loginData.password || !loginData.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AdminLogin, \"tWxz80oWF9pKiU3TXaUeU2IuclY=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AdminLogin;\nconst Wrapper = styled.div`\n    /* display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    min-height: 100vh; */\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-right: -50%;\n    transform: translate(-50%, -50%);\n    \n  `;\n_c2 = Wrapper;\nconst FormWrapper = styled.form`\n  border-radius: 10px; \n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border: 4px solid #42c99d;\n  box-shadow: 0px 0px 25px 1px rgb(40,176,255);\n  background: #DDEDEC;\n  width: 300px;\n  height: 300px;\n  `;\n_c3 = FormWrapper;\nconst Input = styled.input`\n  border: none;\n  background: #42c99d;\n  font-size: 16px;\n  height: 35px;\n  margin: 0px 0px 20px 0px;\n  padding:15px;\n  border-radius: 10px; \n  `;\n_c4 = Input;\nconst SubmitInput = styled.input`\ncolor: white;\nfont-weight: bold;\npadding: 12px 35px 12px 35px;\ntext-align: center;\nborder: none;\nborder-radius: 10px;\nbackground: #42c99d;\n\n&:hover{\n  color: white;\n  background-color: rgb(40,176,255);\n  transition: 150ms;\n}\n&:disabled {\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n`;\n_c5 = SubmitInput;\nconst Background = styled.div`\n  background-image: url(${backgroundImage});\n  position: fixed; \n  min-width: 100%;\n  min-height: 100%;\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  `;\n_c6 = Background;\nexport default AdminLogin;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"AdminLogin\");\n$RefreshReg$(_c2, \"Wrapper\");\n$RefreshReg$(_c3, \"FormWrapper\");\n$RefreshReg$(_c4, \"Input\");\n$RefreshReg$(_c5, \"SubmitInput\");\n$RefreshReg$(_c6, \"Background\");","map":{"version":3,"sources":["/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/AdminLogin.js"],"names":["React","useEffect","useState","useContext","useNavigate","styled","backgroundImage","DataContext","bcrypt","require","AdminLogin","navigate","loginData","setLoginData","setStatus","admin","setAdmin","handleChange","value","name","isApiSubscribed","fetchAdmin","res","fetch","receivedJSON","json","data","catch","error","console","log","handleSubmit","ev","preventDefault","compare","password","err","result","replace","window","alert","target","username","Wrapper","div","FormWrapper","form","Input","input","SubmitInput","Background"],"mappings":"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","sourcesContent":["import React, { useEffect, useState,useContext }  from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport backgroundImage from \"../assets/background2.png\"\r\nimport { DataContext } from \"./DataContext\";\r\nvar bcrypt = require(\"bcryptjs\");\r\n\r\nconst AdminLogin = () =>{\r\nlet navigate = useNavigate();\r\nconst {loginData, setLoginData, setStatus} = useContext(DataContext);\r\nconst [admin, setAdmin] = useState();//state that stores receive Admin Data from server\r\n\r\n\r\n //setting the name of the inputs and values as what is written inside inputs\r\n const handleChange = (value, name) =>{\r\n  setLoginData({...loginData, [name]: value}); \r\n  }\r\n\r\n\r\n  // //verify username and password function\r\n  //   async function checkUser(databaseUsername,inputUsername, dataBasePassword, inputPassword) {\r\n  //     //... fetch user from a db etc.\r\n  //   const checkPassword = await bcrypt.compare(inputPassword, dataBasePassword);\r\n  //     if(checkPassword===true && (inputUsername === databaseUsername) ) {\r\n  //         //if loginfo checks out we navigate to the Admin HomePage\r\n  //         navigate(\"/adminHome\");\r\n  //     } else{\r\n  //       window.alert(\"Username or password is invalid!\");\r\n  //     }}\r\n\r\n\r\n  useEffect(() => {\r\n    // TODO: get seating data for selected flight\r\n    let isApiSubscribed = true;//this is used for cleanup function , to mount and unmount\r\n    if(isApiSubscribed){\r\n    const fetchAdmin = async () =>{\r\n      //get the data from our api, endpoint is expecting :flight, so we provided the selected flight(from dropdown menu)\r\n      const res = await fetch(\"/users/type/admin\"); \r\n      //const res = await fetch(\"/flights/SA231\")\r\n      //converting the received data to JSON\r\n      const receivedJSON = await res.json(); //deconstructing response\r\n      //we then set the state with the received data\r\n      setAdmin(receivedJSON.data); //setting the received data into the users state\r\n      setStatus(\"idle\"); // setting the status to idle as data is loaded\r\n    }\r\n    //calling the function\r\n    fetchAdmin()\r\n    //catching any errors if returned\r\n    .catch(error=>console.log(\"ERROR : \", error));\r\n    }\r\n    return () => {\r\n      // cancel the subscription, unmounting\r\n      isApiSubscribed = false;\r\n  };\r\n  }, []);\r\n\r\n\r\n  //on submit we get the hashed password from DB and compare to what we inputed in the password field\r\n  function handleSubmit(ev){\r\n    ev.preventDefault();//prevents the page from refreshing if submit unsuccesfull\r\n\r\n bcrypt.compare(loginData.password, admin[0].password,function(err, result) {\r\n  // result == true\r\n  console.log(result)\r\n  if(result){\r\n    navigate(\"/adminHome\", { replace: true });//repalce should clear the history..not sure if it works\r\n   }\r\n   else{\r\n     window.alert(\"Invalid Username or Password!\");\r\n   }\r\n\r\n})\r\n\r\n\r\n\r\n\r\n//     const settings = {\r\n//       method: 'GET',\r\n//       headers: {\r\n//       Accept: 'application/json',\r\n//      'Content-Type': 'application/json',\r\n//       }\r\n// }\r\n// fetch(\"/users/type/admin\", settings)\r\n// .then((res)=>res.json())\r\n// .then((response)=>{\r\n// const {status, message, data} = response; //deconstructing response\r\n// setAdmin(data); //setting the received data into the users state\r\n// setStatus(\"idle\"); // setting the status to idle as data is loaded\r\n// bcrypt.compare(loginData.password, admin[0].password).then((res) => {\r\n//   // res === true\r\n//   navigate(\"/adminHome\");\r\n// });\r\n// // if(status==200 && status === \"idle\"){\r\n// //   //we call the function to verify login admin information\r\n// //   checkUser(loginData.username, admin[0].username, admin[0].password, loginData.Password);\r\n// //   }\r\n// //  else if(status === 404){\r\n// //       console.log(message)\r\n// //   }\r\n// })\r\n// .catch((error) => console.log(\"ERROR: \", error)); \r\n}\r\n\r\n\r\n\r\n    return (\r\n      <>\r\n        <Background />\r\n        <Wrapper>\r\n          <FormWrapper onSubmit={handleSubmit} >\r\n            <Input type={\"text\"} \r\n            name=\"username\" \r\n            placeholder=\"Username\" \r\n            required \r\n            onChange={(ev)=> handleChange(ev.target.value, \"username\")}\r\n\r\n            />\r\n\r\n            <Input type={\"password\"} \r\n            name=\"password\" \r\n            placeholder=\"Password\" \r\n            required \r\n            onChange={(ev)=> handleChange(ev.target.value, \"password\")}\r\n            />\r\n\r\n      <SubmitInput type=\"submit\" value=\"Login\" disabled={(!loginData.password || !loginData.username)}/>\r\n          </FormWrapper>\r\n        </Wrapper>\r\n      </>\r\n    );\r\n  }\r\n  \r\n  const Wrapper = styled.div`\r\n    /* display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n    min-height: 100vh; */\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    margin-right: -50%;\r\n    transform: translate(-50%, -50%);\r\n    \r\n  `\r\n  \r\n  const FormWrapper = styled.form`\r\n  border-radius: 10px; \r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: 4px solid #42c99d;\r\n  box-shadow: 0px 0px 25px 1px rgb(40,176,255);\r\n  background: #DDEDEC;\r\n  width: 300px;\r\n  height: 300px;\r\n  `\r\n  \r\n  const Input= styled.input`\r\n  border: none;\r\n  background: #42c99d;\r\n  font-size: 16px;\r\n  height: 35px;\r\n  margin: 0px 0px 20px 0px;\r\n  padding:15px;\r\n  border-radius: 10px; \r\n  `\r\n  \r\nconst SubmitInput = styled.input`\r\ncolor: white;\r\nfont-weight: bold;\r\npadding: 12px 35px 12px 35px;\r\ntext-align: center;\r\nborder: none;\r\nborder-radius: 10px;\r\nbackground: #42c99d;\r\n\r\n&:hover{\r\n  color: white;\r\n  background-color: rgb(40,176,255);\r\n  transition: 150ms;\r\n}\r\n&:disabled {\r\n    cursor: not-allowed;\r\n    opacity: 0.6;\r\n  }\r\n`\r\n  \r\n  const Background = styled.div`\r\n  background-image: url(${backgroundImage});\r\n  position: fixed; \r\n  min-width: 100%;\r\n  min-height: 100%;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  `\r\n\r\nexport default AdminLogin;"]},"metadata":{},"sourceType":"module"}