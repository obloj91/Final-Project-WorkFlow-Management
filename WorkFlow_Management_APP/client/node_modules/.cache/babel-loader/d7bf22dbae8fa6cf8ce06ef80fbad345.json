{"ast":null,"code":"var _jsxFileName = \"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/DataContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/React.createContext(null);\nexport const DataContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [allUsers, setAllUsers] = useState(); //state that contains an array of  all users \n\n  const [allTasks, setAllTasks] = useState(null); //state that contains all tasks from DB\n\n  const [allProjects, setAllProjects] = useState(null); //state that contains all tasks from DB\n\n  const [status, setStatus] = useState(\"loading\"); //default loading state\n\n  const [loginData, setLoginData] = useState({\n    password: \"\",\n    username: \"\"\n  }); //used to store the data from input fields at login\n\n  const [currentLoggedUser, setCurrentLoggedUser] = useState(null); //used to store current logged User Data\n\n  const [admin, setAdmin] = useState(null); //state that stores receive Admin Data from server\n\n  const [updateTaskStatus, setUpdateTaskStatus] = useState(false); //we use this state to know when to relaunch useEffect for get tasks and get project by ID\n  //creatign a useEffect that will execute the GET methods on mount and anytime there's a change in the data\n\n  useEffect(() => {\n    //getting the users array from the server\n    fetch(\"/users\", {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(response => {\n      setStatus(\"idle\"); // setting the status to idle as data is loaded\n\n      return setAllUsers(response.data); //setting the received data into the users state\n    }).catch(error => console.log(\"ERROR: \", error)); //getting the TASKS array from the server\n\n    fetch(\"/projects\", {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(response => {\n      setStatus(\"idle\"); // setting the status to idle as data is loaded\n\n      return setAllProjects(response.data); //setting the received data into the users state\n    }).catch(error => console.log(\"ERROR: \", error));\n  }, []); // executes on mount (or each time page reloads)\n  //get Tasks will excecute on mount and when updateTaskStatus changes\n  // so when user clicks update on a task, this is to render the changes\n  // on the Project task page without having to refresh the page manually each time\n\n  useEffect(() => {\n    //getting the TASKS array from the server\n    fetch(\"/tasks\", {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(response => {\n      setStatus(\"idle\"); // setting the status to idle as data is loaded\n\n      return setAllTasks(response.data); //setting the received data into the users state\n    }).catch(error => console.log(\"ERROR: \", error));\n  }, [updateTaskStatus]);\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      allUsers,\n      setAllUsers,\n      status,\n      setStatus,\n      loginData,\n      setLoginData,\n      currentLoggedUser,\n      setCurrentLoggedUser,\n      admin,\n      setAdmin,\n      allTasks,\n      setAllTasks,\n      allProjects,\n      setAllProjects,\n      updateTaskStatus,\n      setUpdateTaskStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DataContextProvider, \"H43fdeTQUmuTb060zmoHvVOxDrI=\");\n\n_c = DataContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataContextProvider\");","map":{"version":3,"sources":["/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/DataContext.js"],"names":["React","useEffect","useState","DataContext","createContext","DataContextProvider","children","allUsers","setAllUsers","allTasks","setAllTasks","allProjects","setAllProjects","status","setStatus","loginData","setLoginData","password","username","currentLoggedUser","setCurrentLoggedUser","admin","setAdmin","updateTaskStatus","setUpdateTaskStatus","fetch","method","headers","Accept","then","res","json","response","data","catch","error","console","log"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from \"react\";\r\nexport const DataContext = React.createContext(null);\r\n\r\nexport const DataContextProvider = ({children}) =>{\r\nconst [allUsers, setAllUsers] = useState();//state that contains an array of  all users \r\nconst[allTasks, setAllTasks] = useState(null);//state that contains all tasks from DB\r\nconst[allProjects, setAllProjects] = useState(null);//state that contains all tasks from DB\r\nconst [status, setStatus] = useState(\"loading\");//default loading state\r\nconst [loginData, setLoginData] = useState({password: \"\", username: \"\"}); //used to store the data from input fields at login\r\nconst[currentLoggedUser, setCurrentLoggedUser] = useState(null);//used to store current logged User Data\r\nconst [admin, setAdmin] = useState(null);//state that stores receive Admin Data from server\r\nconst [updateTaskStatus, setUpdateTaskStatus] = useState(false);//we use this state to know when to relaunch useEffect for get tasks and get project by ID\r\n\r\n//creatign a useEffect that will execute the GET methods on mount and anytime there's a change in the data\r\nuseEffect(()=>{\r\n    //getting the users array from the server\r\n    fetch(\"/users\", {\r\n        method:\"GET\",\r\n        headers:{\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",},})\r\n    .then((res)=>res.json())\r\n    .then((response)=>{\r\n        setStatus(\"idle\") // setting the status to idle as data is loaded\r\n      return setAllUsers(response.data) //setting the received data into the users state\r\n    })\r\n    .catch((error) => console.log(\"ERROR: \", error));\r\n    \r\n     //getting the TASKS array from the server\r\n     fetch(\"/projects\", {\r\n        method:\"GET\",\r\n        headers:{\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",},})\r\n    .then((res)=>res.json())\r\n    .then((response)=>{\r\n        setStatus(\"idle\") // setting the status to idle as data is loaded\r\n      return setAllProjects(response.data) //setting the received data into the users state\r\n    })\r\n    .catch((error) => console.log(\"ERROR: \", error));\r\n    },[]) // executes on mount (or each time page reloads)\r\n\r\n    //get Tasks will excecute on mount and when updateTaskStatus changes\r\n    // so when user clicks update on a task, this is to render the changes\r\n    // on the Project task page without having to refresh the page manually each time\r\nuseEffect(() =>{\r\n     //getting the TASKS array from the server\r\n     fetch(\"/tasks\", {\r\n        method:\"GET\",\r\n        headers:{\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",},})\r\n    .then((res)=>res.json())\r\n    .then((response)=>{\r\n        setStatus(\"idle\") // setting the status to idle as data is loaded\r\n      return setAllTasks(response.data) //setting the received data into the users state\r\n    })\r\n    .catch((error) => console.log(\"ERROR: \", error));\r\n},[updateTaskStatus])\r\n\r\n\r\n    return (\r\n\r\n        <DataContext.Provider value = {{\r\n                allUsers, setAllUsers, status, setStatus,\r\n                loginData, setLoginData,currentLoggedUser, \r\n                setCurrentLoggedUser, admin, setAdmin,\r\n                allTasks, setAllTasks,allProjects, setAllProjects,\r\n                updateTaskStatus, setUpdateTaskStatus\r\n        }}>\r\n            {children}\r\n        </DataContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}