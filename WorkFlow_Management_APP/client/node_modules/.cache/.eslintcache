[{"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/index.js":"1","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/App.js":"2","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/Homepage.js":"3","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/DataContext.js":"4","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/GlobalStyle.js":"5","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/Header.js":"6","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/UserLogin.js":"7","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/AdminLogin.js":"8","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/ResponsiveGrid.js":"9","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/UserSignUp.js":"10","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/AdminHomepage.js":"11","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/UserHomepage.js":"12","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/Sidebar.js":"13","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/AdminNewProjectForm.js":"14","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/AdminProjects.js":"15","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/CurrentProject.js":"16","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/Spinner.js":"17","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/AdminNewTaskForm.js":"18"},{"size":216,"mtime":1654217857000,"results":"19","hashOfConfig":"20"},{"size":1975,"mtime":1654481800000,"results":"21","hashOfConfig":"20"},{"size":1998,"mtime":1654481801000,"results":"22","hashOfConfig":"20"},{"size":3754,"mtime":1654481800000,"results":"23","hashOfConfig":"20"},{"size":5479,"mtime":1654481800000,"results":"24","hashOfConfig":"20"},{"size":533,"mtime":1654481800000,"results":"25","hashOfConfig":"20"},{"size":3743,"mtime":1654481802000,"results":"26","hashOfConfig":"20"},{"size":5884,"mtime":1654481800000,"results":"27","hashOfConfig":"20"},{"size":1646,"mtime":1654481802000,"results":"28","hashOfConfig":"20"},{"size":5425,"mtime":1654481802000,"results":"29","hashOfConfig":"20"},{"size":2391,"mtime":1654481800000,"results":"30","hashOfConfig":"20"},{"size":10023,"mtime":1654483664314,"results":"31","hashOfConfig":"20"},{"size":2459,"mtime":1654481802000,"results":"32","hashOfConfig":"20"},{"size":5704,"mtime":1654481800000,"results":"33","hashOfConfig":"20"},{"size":4065,"mtime":1654481800000,"results":"34","hashOfConfig":"20"},{"size":18865,"mtime":1654481800000,"results":"35","hashOfConfig":"20"},{"size":755,"mtime":1654481802000,"results":"36","hashOfConfig":"20"},{"size":10248,"mtime":1654481800000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"szu7ne",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/index.js",[],["81","82"],"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/App.js",["83"],"import GlobalStyle from \"./GlobalStyle\";\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport { DataContextProvider } from \"./DataContext\";//Add the Context Provider to the entire application\r\n\r\nimport ResponsiveGrid from \"./ResponsiveGrid\";\r\nimport Homepage from \"./Homepage\";\r\nimport Header from \"./Header\";\r\nimport UserLogin from \"./UserLogin\";\r\nimport AdminLogin from \"./AdminLogin\";\r\nimport UserSignUp from \"./UserSignUp\";\r\nimport AdminHomepage from \"./AdminHomepage\";\r\nimport UserHomepage from \"./UserHomepage\";\r\nimport AdminProjects from \"./AdminProjects\";\r\nimport CurrentProject from \"./CurrentProject\";\r\nimport AdminNewTaskForm from \"./AdminNewTaskForm\";\r\n\r\nconst App = () => {\r\n    return (\r\n      <>\r\n        <GlobalStyle />\r\n        <BrowserRouter>\r\n          <DataContextProvider>\r\n            <Header />\r\n            {/* <ResponsiveGrid/> */}\r\n            <Routes>\r\n              <Route path=\"/\" exact element={<Homepage/>} />\r\n              <Route path=\"/adminLogin\" element={<AdminLogin/>} />\r\n              <Route path=\"/userLogin\" element={<UserLogin/>} />\r\n              <Route path=\"/userSignUp\" element={<UserSignUp/>} />\r\n              <Route path=\"/adminHome\" element={<AdminHomepage/>} />\r\n              <Route path=\"/userHome/:_id\" element={<UserHomepage/>} />\r\n              <Route path=\"/adminHome/myProjects\" element={<AdminProjects/>} />\r\n              <Route path=\"/adminHome/myProjects/:_id\" element={<CurrentProject/>} />\r\n              <Route path=\"/adminHome/myProjects/:_id/newTask\" element={<AdminNewTaskForm/>} />\r\n              {/* <Route path=\"/products\" element={<Products />} />\r\n              <Route path=\"/items/:id\" element={<ProductDetails />} />\r\n              <Route path=\"/cart\" element={<Cart />} />\r\n              <Route path=\"/grid\" element={<ResponsiveGrid />} /> */}\r\n            </Routes>\r\n          </DataContextProvider>\r\n        </BrowserRouter>\r\n      </>\r\n    );\r\n  };\r\n  \r\n  export default App;","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/Homepage.js",[],"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/DataContext.js",[],"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/GlobalStyle.js",[],"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/Header.js",[],"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/UserLogin.js",[],"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/AdminLogin.js",["84"],"import React, { useEffect, useContext }  from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport backgroundImage from \"../assets/background2.png\"\r\nimport { DataContext } from \"./DataContext\";\r\nvar bcrypt = require(\"bcryptjs\");\r\n\r\n\r\n\r\nconst AdminLogin = () =>{\r\nlet navigate = useNavigate();\r\nconst {loginData, setLoginData, setStatus, admin, setAdmin} = useContext(DataContext);\r\n\r\n //setting the name of the inputs and values as what is written inside inputs\r\n const handleChange = (value, name) =>{\r\n  setLoginData({...loginData, [name]: value}); \r\n  }\r\n\r\n  // //verify username and password function\r\n  //   async function checkUser(databaseUsername,inputUsername, dataBasePassword, inputPassword) {\r\n  //     //... fetch user from a db etc.\r\n  //   const checkPassword = await bcrypt.compare(inputPassword, dataBasePassword);\r\n  //     if(checkPassword===true && (inputUsername === databaseUsername) ) {\r\n  //         //if loginfo checks out we navigate to the Admin HomePage\r\n  //         navigate(\"/adminHome\");\r\n  //     } else{\r\n  //       window.alert(\"Username or password is invalid!\");\r\n  //     }}\r\n\r\n\r\n  useEffect(() => {\r\n    let isApiSubscribed = true;//this is used for cleanup function , to mount and unmount\r\n    if(isApiSubscribed){\r\n    const fetchAdmin = async () =>{\r\n      //get the data from our api, endpoint is expecting :flight, so we provided the selected flight(from dropdown menu)\r\n      const res = await fetch(\"/users/type/admin\"); \r\n      //const res = await fetch(\"/flights/SA231\")\r\n      //converting the received data to JSON\r\n      const receivedJSON = await res.json(); //deconstructing response\r\n      //we then set the state with the received data\r\n      setAdmin(receivedJSON.data); //setting the received data into the users state\r\n      setStatus(\"idle\"); // setting the status to idle as data is loaded\r\n    }\r\n    //calling the function\r\n    fetchAdmin()\r\n    //catching any errors if returned\r\n    .catch(error=>console.log(\"ERROR : \", error));\r\n    }\r\n    return () => {\r\n      // cancel the subscription, unmounting\r\n      isApiSubscribed = false;\r\n  };\r\n  }, []);\r\n\r\n\r\n  //on submit we get the hashed password from DB and compare to what we inputed in the password field\r\n  function handleSubmit(ev){\r\n    ev.preventDefault();//prevents the page from refreshing if submit unsuccesfull\r\n\r\n bcrypt.compare(loginData.password, admin[0].password,function(err, result) {\r\n  // result == true\r\n  console.log(result)\r\n  if(result && (admin[0].username === loginData.username)){\r\n    navigate(\"/adminHome\", { replace: true });//repalce should clear the history..not sure if it works\r\n   }\r\n   else{\r\n     window.alert(\"Invalid Username or Password!\");\r\n   }\r\n\r\n})\r\n\r\n//     const settings = {\r\n//       method: 'GET',\r\n//       headers: {\r\n//       Accept: 'application/json',\r\n//      'Content-Type': 'application/json',\r\n//       }\r\n// }\r\n// fetch(\"/users/type/admin\", settings)\r\n// .then((res)=>res.json())\r\n// .then((response)=>{\r\n// const {status, message, data} = response; //deconstructing response\r\n// setAdmin(data); //setting the received data into the users state\r\n// setStatus(\"idle\"); // setting the status to idle as data is loaded\r\n// bcrypt.compare(loginData.password, admin[0].password).then((res) => {\r\n//   // res === true\r\n//   navigate(\"/adminHome\");\r\n// });\r\n// // if(status==200 && status === \"idle\"){\r\n// //   //we call the function to verify login admin information\r\n// //   checkUser(loginData.username, admin[0].username, admin[0].password, loginData.Password);\r\n// //   }\r\n// //  else if(status === 404){\r\n// //       console.log(message)\r\n// //   }\r\n// })\r\n// .catch((error) => console.log(\"ERROR: \", error)); \r\n}\r\n\r\n\r\n\r\n    return (\r\n      <>\r\n        <Background />\r\n        <Wrapper>\r\n          <FormWrapper onSubmit={handleSubmit} >\r\n            <Input type={\"text\"} \r\n            name=\"username\" \r\n            placeholder=\"Username\" \r\n            required \r\n            onChange={(ev)=> handleChange(ev.target.value, \"username\")}\r\n\r\n            />\r\n\r\n            <Input type={\"password\"} \r\n            name=\"password\" \r\n            placeholder=\"Password\" \r\n            required \r\n            onChange={(ev)=> handleChange(ev.target.value, \"password\")}\r\n            />\r\n\r\n      <SubmitInput type=\"submit\" value=\"Login\" disabled={(!loginData.password || !loginData.username)}/>\r\n          </FormWrapper>\r\n        </Wrapper>\r\n      </>\r\n    );\r\n  }\r\n  \r\n  const Wrapper = styled.div`\r\n    /* display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n    min-height: 100vh; */\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    margin-right: -50%;\r\n    transform: translate(-50%, -50%);\r\n    \r\n  `\r\n  \r\n  const FormWrapper = styled.form`\r\n  border-radius: 10px; \r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: 4px solid #42c99d;\r\n  box-shadow: 0px 0px 25px 1px rgb(40,176,255);\r\n  background: #DDEDEC;\r\n  width: 300px;\r\n  height: 300px;\r\n  `\r\n  \r\n  const Input= styled.input`\r\n  border: none;\r\n  background: #42c99d;\r\n  font-size: 16px;\r\n  height: 35px;\r\n  margin: 0px 0px 20px 0px;\r\n  padding:15px;\r\n  border-radius: 10px; \r\n  `\r\n  \r\nconst SubmitInput = styled.input`\r\ncolor: white;\r\nfont-weight: bold;\r\npadding: 12px 35px 12px 35px;\r\ntext-align: center;\r\nborder: none;\r\nborder-radius: 10px;\r\nbackground: #42c99d;\r\n\r\n&:hover{\r\n  color: white;\r\n  background-color: rgb(40,176,255);\r\n  transition: 150ms;\r\n}\r\n&:disabled {\r\n    cursor: not-allowed;\r\n    opacity: 0.6;\r\n  }\r\n`\r\n  \r\n  const Background = styled.div`\r\n  background-image: url(${backgroundImage});\r\n  position: fixed; \r\n  min-width: 100%;\r\n  min-height: 100%;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  `\r\n\r\nexport default AdminLogin;","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/ResponsiveGrid.js",[],"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/UserSignUp.js",[],"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/AdminHomepage.js",[],"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/UserHomepage.js",["85","86"],"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/Sidebar.js",["87"],"import React  from \"react\";\r\nimport styled from \"styled-components\";\r\nimport GlobalStyle from \"./GlobalStyle\";\r\n\r\nimport{BsFillPlusCircleFill} from \"react-icons/bs\";\r\nimport { NavLink, useNavigate} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nconst Sidebar = ({newProjectStatus, setNewProjectStatus}) =>{\r\n  let navigate = useNavigate();\r\n\r\n  const handleClick = async() =>{\r\n  //when admin clicks Create Project button, it will set the newProjectStatus state to true\r\n  //therefore rendering the project sign up form on the Admin Homepage, this is also achievable by creating a new route and using useNavigate or Navlink\r\n  setNewProjectStatus(true);\r\n  navigate(\"/adminHome\");\r\n  }\r\n    return (\r\n      <ListWrapper>\r\n          <ListedItem>\r\n        <Button onClick={handleClick}>\r\n         <span><BsFillPlusCircleFill size={30} /></span> \r\n          <p>Home/Create Project</p>\r\n        </Button>\r\n        </ListedItem>\r\n\r\n        <ListedItem>\r\n            <NavigationLink to={\"/adminHome/myProjects\"} onClick={handleClick}>\r\n                My Projects\r\n            </NavigationLink>\r\n        </ListedItem>\r\n\r\n        \r\n        <ListedItem>\r\n            <NavigationLink to={\"#\"}>\r\n                My Settings\r\n            </NavigationLink>\r\n        </ListedItem>\r\n\r\n\r\n      </ListWrapper>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nconst ListWrapper = styled.ul`\r\nlist-style-type: none;\r\ndisplay: flex;\r\nflex-direction: column;\r\nfont-weight: bold;\r\npadding: 20px 0px 20px 20px;\r\nbackground: #42c99d;\r\nwidth: 15rem;\r\nheight: 140vh;\r\n`\r\n\r\n\r\n\r\nconst ListedItem = styled.li`\r\n/*  adds space between listed items instead of using margin-top */\r\ndisplay: flex;\r\nalign-items: center;\r\ncolor: black;\r\nmargin-top:30px;\r\np{\r\n margin-left: 10px;\r\n}\r\n`\r\n\r\nconst NavigationLink = styled(NavLink)`\r\nborder-radius: 5px;\r\ncolor: black;\r\ntext-decoration: none;\r\nborder: none;\r\nbackground: #DDEDEC;\r\npadding: 17px 52px 17px 52px;\r\n  &:hover{\r\n    color: white;\r\n    background-color: rgb(40,176,255);\r\n    transition: 150ms;\r\n  }\r\n`\r\n\r\nconst Button = styled.button`\r\ndisplay: flex;\r\nalign-items: center;\r\ncolor: black;\r\ntext-decoration: none;\r\nmax-width: 193px;\r\nborder: none;\r\nbackground: #DDEDEC;\r\npadding: 13px 20px 10px 20px;\r\nfont-weight: bold;\r\nborder-radius: 5px;\r\nfont-size: 17px;\r\n  &:hover{\r\n    color: white;\r\n    background-color: rgb(40,176,255);\r\n    transition: 150ms;\r\n    span{\r\n        color: black;\r\n    transform: scale(1.3);\r\n    transition: 50ms;\r\n  }\r\n  }\r\n`\r\n\r\nexport default Sidebar;","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/AdminNewProjectForm.js",[],"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/AdminProjects.js",["88"],"\r\nimport React, {useContext, useState }  from \"react\";\r\nimport backgroundImage from \"../assets/background2.png\"\r\nimport styled from \"styled-components\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport { NavLink, useNavigate} from \"react-router-dom\";\r\n\r\nconst AdminProjects = () =>{\r\n    const {admin,allProjects} = useContext(DataContext);\r\n    const [newProjectStatus, setNewProjectStatus] = useState(false);\r\n    let navigate = useNavigate();\r\n\r\n\r\n    return (\r\n      <>\r\n        <Background />\r\n        <Wrapper>\r\n          <Sidebar\r\n            newProjectStatus={newProjectStatus}\r\n            setNewProjectStatus={setNewProjectStatus}\r\n          />\r\n\r\n          {newProjectStatus === true || admin !== null ? (\r\n            <HomeWrapper>\r\n              <Title>My Projects</Title>\r\n              <ListWrapper>\r\n                {allProjects.map((proj) => {\r\n                  return (\r\n                   \r\n                    <ListedItem key={proj._id}>\r\n                      <Button onClick={()=> navigate(`/adminHome/myProjects/${proj._id}`)}>\r\n                      <h3>{proj.projectName}</h3>\r\n                      <p>\r\n                        Project Type: <i>{proj.projectType}</i>\r\n                      </p>\r\n                      <p>\r\n                        Project Deadline: <i>{proj.projectDeadline}</i>\r\n                      </p>\r\n                      </Button>\r\n                    </ListedItem>\r\n                \r\n                  );\r\n                })}\r\n              </ListWrapper>\r\n            </HomeWrapper>\r\n          ) : (\r\n            //if page refreshes we use this message to indicate admin is logged out\r\n            <div\r\n              style={{\r\n                width: \"600px\",\r\n                position: \"absolute\",\r\n                top: \"50%\",\r\n                left: \"30%\",\r\n              }}\r\n            >\r\n              <Title\r\n                style={{\r\n                  textAlign: \"center\",\r\n                  borderRadius: \"10px\",\r\n                  padding: \"10px\",\r\n                  background: \"red\",\r\n                }}\r\n              >\r\n                Admin signed out, go back to login page!\r\n                <button\r\n                  style={{\r\n                    border: \"none\",\r\n                    padding: \"7px\",\r\n                    borderRadius: \"10px\",\r\n                    background: \"#28B0FF\",\r\n                    color: \"white\",\r\n                  }}\r\n                  onClick={() => navigate(\"/adminLogin\")}\r\n                >\r\n                  <b>Go to Login</b>\r\n                </button>\r\n              </Title>\r\n            </div>\r\n          )}\r\n        </Wrapper>\r\n      </>\r\n    );\r\n    }\r\n\r\n  const Wrapper = styled.div`\r\n  display: flex;\r\n  `\r\n  const HomeWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items:flex-start;\r\n  width: 900px;\r\n  margin: 50px;\r\n  background: rgba(221, 237, 236, 1);\r\n  border-radius: 5px;\r\n  `\r\n  \r\n  const Background = styled.div`\r\n    z-index: -1;\r\n    background-image: url(${backgroundImage});\r\n    position: absolute; \r\n    min-width: 100%;\r\n    min-height: 140%;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n  `\r\n\r\nconst Title = styled.h1`\r\nfont-size: 25px;\r\nmargin-top: 2%;\r\nmargin-left: 3%;\r\n`\r\n\r\n\r\n\r\nconst ListWrapper = styled.ul`\r\nlist-style-type: none;\r\ndisplay: flex;\r\nflex-direction: column;\r\nfont-weight: bold;\r\npadding: 20px 0px 20px 20px;\r\nwidth: 17rem;\r\n`\r\n\r\n\r\n\r\nconst ListedItem = styled.li`\r\n/*  adds space between listed items instead of using margin-top */\r\n`\r\n\r\nconst Button = styled.button`\r\ntext-decoration: none;\r\nborder: none;\r\nborder-radius: 5px;\r\nmargin-bottom:20px;\r\ncolor: black;\r\ntext-decoration: none;\r\ntext-align: center;\r\nfont-size: 15px;\r\nborder: none;\r\nbackground: #F16436;\r\npadding: 20px;\r\n  &:hover{\r\n    color: white;\r\n    background-color: rgb(40,176,255);\r\n    transition: 150ms;\r\n  }\r\n`\r\n\r\n// const NavigationLink = styled(NavLink)`\r\n// text-decoration: none;\r\n// `\r\nexport default AdminProjects;","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/CurrentProject.js",["89","90"],"\r\nimport React, {useContext, useState, useEffect }  from \"react\";\r\nimport backgroundImage from \"../assets/background2.png\"\r\nimport styled from \"styled-components\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport { useNavigate, useParams} from \"react-router-dom\";\r\nimport EasyEdit, {Types} from 'react-easy-edit';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Spinner from \"./Spinner\";\r\nimport{BsPatchQuestionFill} from \"react-icons/bs\";\r\nimport Select from \"react-select\";\r\nimport{SiAddthis} from \"react-icons/si\";\r\n\r\nconst CurrentProject = () =>{\r\nconst {admin,allTasks,updateTaskStatus, setUpdateTaskStatus,\r\n  projectById, setProjectById, allUsers} = useContext(DataContext);\r\n\r\nconst [newProjectStatus, setNewProjectStatus] = useState(false);\r\nconst [tasksOfProject, setTasksOfProject] = useState(null);//state that stores the tasks associated with each project (projectById)\r\n// const [responseObj, setResponseObj] = useState({});\r\n\r\nlet navigate = useNavigate();\r\n\r\nconst {_id} = useParams();//getting the PROJECT _id from the URL\r\nconst [formData, setFormData] = useState({});//Object state for storing form data from inputs\r\n// const save = (value) => { setFormData({...formData, [name]: value})}\r\n// const cancel = () => {console.log(\"Cancelled\")}\r\n\r\nuseEffect(() => {\r\n    // TODO: get seating data for selected flight\r\n    let isApiSubscribed = true;//this is used for cleanup function , to mount and unmount\r\n    if(isApiSubscribed){\r\n        const getProjectByID = async () => {\r\n            const res = await fetch(`/projects/${_id}`,  {\r\n                  method:\"GET\",\r\n                  headers:{\r\n                  Accept: \"application/json\",\r\n                  \"Content-Type\": \"application/json\",},})\r\n             const json = await res.json();\r\n             const findTaksOfProject = allTasks.filter((task) => json.data.tasks.find((el) => task.taskID === el) );\r\n             setProjectById(json.data);\r\n             setTasksOfProject(findTaksOfProject);\r\n              }\r\n              getProjectByID() //calling the function\r\n    //catching any errors if returned\r\n    .catch(error=>console.log(\"ERROR : \", error));\r\n\r\n    }\r\n    return () => {\r\n      // cancel the subscription, unmounting\r\n      isApiSubscribed = false;\r\n  };\r\n  }, [updateTaskStatus]);//useEffect will also execute when selectedFlight changes\r\n\r\n\r\n  const handleUpdate = async() =>{\r\n    // //if the formData state did not had enough time to update we print a message to wait and if it did we execute the PUT\r\n    // if(!formData.taskID){\r\n    //  console.log(\"Waiting for forData State to update!\")\r\n    // }\r\n    const settings = {\r\n      method: 'PUT',\r\n      body: JSON.stringify(formData),\r\n      headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n      }\r\n  }\r\n  fetch(\"/tasks\", settings)\r\n  .then((res)=>res.json())\r\n  .then((response)=>{\r\n   window.alert(response.message);//set the received server response in a window alert\r\n   setUpdateTaskStatus(!updateTaskStatus); //sets the status of update to the opposite of current value\r\n  // setResponseObj({status: response.status, message: response.message}); // setting the received response object in a state\r\n}).catch((error) => console.log(\"ERROR: \", error));\r\n    }\r\n\r\n//     //we want to show the returned message response from the server only for 2 seconds\r\n//     const [showMessage, setShowMessage] = useState(false);\r\n// useEffect(() => {\r\n//   setTimeout(() =>{\r\n//     // we set the state showMessage to true for 2 seconds\r\n//     setShowMessage(!showMessage);\r\n//   }, 2000)\r\n// }, []);\r\n\r\nconst handleDelete = async() =>{\r\n  const settings = {\r\n    method: 'DELETE',\r\n    headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n    }\r\n}\r\nfetch(`/tasks/${checkedValue.taskID}`, settings)\r\n.then((res)=>res.json())\r\n.then((response)=>{\r\n window.alert(response.message);//set the received server response in a window alert\r\n setUpdateTaskStatus(!updateTaskStatus); //sets the status of update to the opposite of current value\r\n// setResponseObj({status: response.status, message: response.message}); // setting the received response object in a state\r\n}).catch((error) => console.log(\"ERROR: \", error));\r\n  }\r\n\r\n  //State used for checked radio button for each task before deleting\r\n  const [checkedValue, setCheckedValue] = useState({taskID:\"\"});\r\n  const handleChange = (ev) => {\r\n    setCheckedValue({taskID: ev.target.value});\r\n  };\r\n\r\n\r\n  // Drop Down Progress Menu\r\n  const options = [\r\n    { value: \"status\", label: \"Work in progress\" },\r\n    { value: \"status\", label: \"Submitted for review\" },\r\n    { value: \"status\", label: \"Started\" },\r\n  ];\r\n  // const [progress, setProgress] = useState();\r\n  // const progressUpdate = (e) => {\r\n  //   setProgress(e.label);\r\n  // };\r\n  //optionlist to select users for a task\r\n  const generateOptionsList = () => {\r\nconst optionsList =[];\r\n    allUsers.map((user)=>{\r\n      return optionsList.push({ label: user.firstName + \" \" + user.lastName,\r\n       value: user.firstName + \" \" + user.lastName})\r\n    })\r\n    return optionsList;\r\n  };\r\n\r\n  \r\n  const handleClick = async() =>{\r\n    //when admin clicks Create Project button, it will set the newProjectStatus state to true\r\n    //therefore rendering the project sign up form on the Admin Homepage, this is also achievable by creating a new route and using useNavigate or Navlink\r\n    navigate(`/adminHome/myProjects/${_id}/newTask`);\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Background />\r\n        <Wrapper>\r\n          <Sidebar\r\n            newProjectStatus={newProjectStatus}\r\n            setNewProjectStatus={setNewProjectStatus}\r\n          />\r\n\r\n          {newProjectStatus === true || admin !== null ? (\r\n            <HomeWrapper>\r\n              <Title>My Projects</Title>\r\n              {projectById !== null &&\r\n              <h2 style={{marginLeft: \"3%\",\"color\":\"#F16436\", marginTop: \"20px\"}}> Project - {projectById.projectName} </h2> }\r\n\r\n              <ListWrapper>\r\n               {(projectById !== null && tasksOfProject!==null) ? (\r\n               tasksOfProject.map((task)=>{\r\n                   return (\r\n                     <TaskWrapper key={task.taskID} >\r\n\r\n                      <span className=\"tooltip\">\r\n                       <h3 style={{ \"color\":\"#FED980\"}}>Task Name: {task.taskName}\r\n                       <BsPatchQuestionFill size={20} style ={{position: \"absolute\", right: \"0\"}}/></h3>\r\n                       <span className=\"tooltiptext\"  style={{fontSize: \"12px\"}}>\r\n                         Click on each task value to edit and update or select the task to delete!</span>\r\n                       </span>\r\n\r\n                       <span style={{ display:\"flex\"}}>\r\n                       <p style={{ \"color\":\"white\", marginRight: \"5px\"}}> Due Date: </p>\r\n                         <EasyEdit\r\n                           type={Types.DATE}\r\n                           value={task.dueDate}\r\n                           onSave={(value) => { setFormData({dueDate: value, taskID: task.taskID,\r\n                            nbrDeliverables: task.nbrDeliverables, details: task.details, \r\n                            assignedUsers: task.assignedUsers, comments: task.comments})}}\r\n                           saveButtonLabel={<FontAwesomeIcon icon={faCheck} />}\r\n                           cancelButtonLabel={\r\n                             <FontAwesomeIcon icon={faTimes} />\r\n                           } />\r\n                        </span>\r\n\r\n                       <span style={{ display:\"flex\"}} >\r\n                       <p style={{ \"color\":\"white\", marginRight: \"5px\"}}> Number of Deliverables: </p>\r\n                         <EasyEdit\r\n                           type={Types.TEXT}\r\n                           value={task.nbrDeliverables}\r\n                           onSave={(value) => {\r\n                             setFormData({nbrDeliverables: value, taskID: task.taskID, status:task.status,\r\n                              dueDate: task.dueDate, details: task.details, \r\n                              assignedUsers: task.assignedUsers, comments: task.comments})}}\r\n                           saveButtonLabel={<FontAwesomeIcon icon={faCheck} />}\r\n                           cancelButtonLabel={\r\n                             <FontAwesomeIcon icon={faTimes} />\r\n                           } />\r\n                        </span>\r\n\r\n                       <span style={{ display:\"flex\"}} >\r\n                       <p style={{ \"color\":\"white\", marginRight: \"5px\"}}> Task Details: </p>\r\n                         <EasyEdit\r\n                           type={Types.TEXT}\r\n                           value={task.details}\r\n                           onSave={(value) => {\r\n                            setFormData({details: value, taskID: task.taskID, nbrDeliverables: task.nbrDeliverables,\r\n                              status:task.status, dueDate: task.dueDate, \r\n                              assignedUsers: task.assignedUsers, comments: task.comments})}}\r\n                           saveButtonLabel={<FontAwesomeIcon icon={faCheck} />}\r\n                           cancelButtonLabel={\r\n                             <FontAwesomeIcon icon={faTimes} />\r\n                           }/>\r\n                       </span>\r\n\r\n                       <span style={{ display:\"flex\"}} >\r\n                       <p style={{ \"color\":\"white\", marginRight: \"5px\"}}> Comments: </p>\r\n                         <EasyEdit\r\n                           type={Types.TEXT}\r\n                           value={task.comments !== \"\" ? task.comments : \"Click to edit\" }\r\n                           onSave={(value) => {\r\n                            setFormData({comments: value, taskID: task.taskID, nbrDeliverables: task.nbrDeliverables,\r\n                              status:task.status, dueDate: task.dueDate, \r\n                              assignedUsers: task.assignedUsers, details: task.details})}}\r\n                           saveButtonLabel={<FontAwesomeIcon icon={faCheck} />}\r\n                           cancelButtonLabel={\r\n                             <FontAwesomeIcon icon={faTimes} />\r\n                           } />\r\n                        </span>\r\n                       \r\n                       <div style={{ display: \"flex\", marginTop: \"1%\"}}>\r\n                       <p style={{ \"color\":\"white\", marginRight: \"5px\"}}> Assigned Users: </p>\r\n                       <EasyEdit\r\n                        type={Types.CHECKBOX}\r\n                        options={generateOptionsList()}\r\n                        onSave={(value) => {\r\n                          const splittedValues = value.toString().split(\",\");//value is an Object, we have to convert to String then split it\r\n                          const arrOfSplitted = splittedValues.map((el)=>{\r\n                            const splittedEl = el.split(\" \")//we have to split each element [\"john doe\"] to get [\"john\", \"doe\"]\r\n                            return {firstName: splittedEl[0], lastName: splittedEl[1]}\r\n                          });\r\n                          return (\r\n                          setFormData({ assignedUsers: arrOfSplitted//[{firstName: splittedValue[0], lastName: splittedValue[1]}]\r\n                            , comments: task.comments, taskID: task.taskID, \r\n                            nbrDeliverables: task.nbrDeliverables, status:task.status, dueDate: task.dueDate, details: task.details})\r\n                          )\r\n                          }}\r\n                        \r\n                            value={ formData.taskID !== task.taskID ? task.assignedUsers.map((user)=>{\r\n                          return(`${user.firstName + \" \" + user.lastName}`)\r\n                        }) : formData.assignedUsers.map((usr)=>{\r\n                          return(`${usr.firstName + \" \" + usr.lastName}`)\r\n                        })} // this will preselect the names of assigned users to the task(as displayed values), if the form hasn't changed it will display the users from the mapped task\r\n                        />\r\n                       </div>\r\n\r\n                       \r\n                    <div style={{ display: \"flex\", alignItems: 'center', marginTop: \"1%\", fontSize: \"16px\" }}>\r\n                    <p style={{ \"color\":\"white\", marginRight: \"5px\"}}> Status: </p>\r\n                       <Select options={options} \r\n                               placeholder ={task.status}\r\n                       onChange={(ev) => { setFormData({status: ev.label, dueDate: task.dueDate, taskID: task.taskID,\r\n                            nbrDeliverables: task.nbrDeliverables, details: task.details, \r\n                            assignedUsers: task.assignedUsers, comments: task.comments})}} />\r\n                    </div>\r\n\r\n                        <div style={{display:\"flex\"}}>\r\n                        <Button onClick={handleUpdate} disabled = {(!formData.taskID)}>\r\n                         Update Task\r\n                        </Button>\r\n\r\n                        <Button2 onClick={handleDelete} disabled = {(!checkedValue.taskID)}>\r\n                         Delete Task\r\n                        </Button2>\r\n                      \r\n                        <label style={ {display: \"flex\", alignItems:\"center\", position:\"relative\", top:\"10%\"}}>\r\n                          <input type=\"radio\" value= {`${task.taskID}`} checked={checkedValue.taskID === `${task.taskID}`} onChange={handleChange}/>\r\n                          <span style={{\r\n                            fontSize: \"11px\", overflowWrap:\"break-word\"}}>\r\n                              <p  style={{width: \"70%\"}} >Select task to delete!</p></span>\r\n                          </label>\r\n                        \r\n                        </div>  \r\n        {/* responseObj.status !== 201 ?\r\n         showMessage && <>\r\n              <h3 style={{\"marginTop\": \"10px\",\"color\":\"#D80026\",\r\n             \"fontSize\":\"15px\", \"textAlign\":\"center\"}} >{responseObj.message}</h3>\r\n            </>\r\n         :\r\n         (showMessage===false) &&  <>\r\n            <h3 style={{\"marginTop\": \"10px\",\"color\":\"#D80026\",\r\n            \"fontSize\":\"15px\", \"textAlign\":\"center\"}} >{responseObj.message}</h3>\r\n            {/* <p style={{\"marginTop\": \"10px\",\"color\":\"#D80026\",\r\n            \"fontSize\":\"15px\", \"textAlign\":\"center\"}}>\r\n                Go to <b>My Projects</b> section to see your created Projects!</p> </>*/}\r\n  </TaskWrapper>\r\n  \r\n  )}))  : (  <SWrapper>\r\n                <Spinner/>\r\n                 <p>Loading...</p>\r\n              </SWrapper>)\r\n\r\n               }\r\n              </ListWrapper>\r\n         \r\n              {(projectById !== null && tasksOfProject!==null) &&(\r\n               <Button3 onClick={handleClick}>\r\n                  <span><SiAddthis size={25} /></span> \r\n                  <p>Create New Task</p>\r\n                </Button3>\r\n                )}\r\n\r\n            </HomeWrapper>\r\n            \r\n          ) : (\r\n            //if page refreshes we use this message to indicate admin is logged out\r\n            <div\r\n              style={{\r\n                width: \"600px\",\r\n                position: \"absolute\",\r\n                top: \"50%\",\r\n                left: \"30%\",\r\n              }}\r\n            >\r\n              <Title\r\n                style={{\r\n                  textAlign: \"center\",\r\n                  borderRadius: \"10px\",\r\n                  padding: \"10px\",\r\n                  background: \"red\",\r\n                }}\r\n              >\r\n                Admin signed out, go back to login page!\r\n                <button\r\n                  style={{\r\n                    border: \"none\",\r\n                    padding: \"7px\",\r\n                    borderRadius: \"10px\",\r\n                    background: \"#28B0FF\",\r\n                    color: \"white\",\r\n                  }}\r\n                  onClick={() => navigate(\"/adminLogin\")}\r\n                >\r\n                  <b>Go to Login</b>\r\n                </button>\r\n              </Title>\r\n            </div>\r\n          )\r\n          }\r\n        </Wrapper>\r\n      </>\r\n    );\r\n    }\r\n\r\n  const Wrapper = styled.div`\r\n  display: flex;\r\n  `\r\n  const HomeWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items:flex-start;\r\n  width: 900px;\r\n  margin: 50px;\r\n  background: rgba(221, 237, 236, 1);\r\n  border-radius: 5px;\r\n  `\r\n\r\n  const Background = styled.div`\r\n    z-index: -1;\r\n    background-image: url(${backgroundImage});\r\n    position: absolute;\r\n    min-width: 100%;\r\n    min-height: 140%;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n  `\r\n\r\nconst Title = styled.h1`\r\nfont-size: 25px;\r\nmargin-top: 2%;\r\nmargin-left: 3%;\r\n`\r\n\r\n\r\nconst ListWrapper = styled.ul`\r\nlist-style-type: none;\r\ndisplay: flex;\r\nflex-direction: column;\r\nfont-weight: bold;\r\npadding: 20px 0px 20px 20px;\r\nwidth: 17rem;\r\n`\r\n\r\n\r\n\r\nconst ListedItem = styled.li`\r\n/*  adds space between listed items instead of using margin-top */\r\n`\r\n\r\nconst SWrapper = styled.div`\r\ndisplay: flex;\r\nflex-direction:column;\r\njustify-content: center;\r\nalign-items: center;\r\np{\r\n    margin-top: 50px ;\r\n}\r\n`\r\n\r\nconst TaskWrapper = styled.div`\r\nwidth: 40vw;\r\nmargin-left: 3%;\r\nmargin-bottom: 20px;\r\nborder-radius: 5px;\r\npadding:10px;\r\ndisplay: flex;\r\nflex-direction: column;\r\nbackground: #42C99D;\r\n/* align-items:baseline; */\r\nfont-weight:normal;\r\nh3{\r\n  border-bottom: 1px solid;\r\n  margin-bottom: 5px;\r\n}\r\np{\r\n  color: white;\r\n}\r\n\r\n\r\n  .tooltip {\r\n  position: relative;\r\n  display: inline-block;\r\n}\r\n\r\n.tooltip .tooltiptext {\r\n  visibility: hidden;\r\n  width: 120px;\r\n  background-color: #5B9BD5;\r\n  color: #fff;\r\n  text-align: center;\r\n  border-radius: 6px;\r\n  padding: 5px 0;\r\n\r\n  /* Position the tooltip */\r\n  position: absolute;\r\n  z-index: 1;\r\n  top: -5px;\r\n  left: 105%;\r\n}\r\n\r\n.tooltip:hover .tooltiptext {\r\n  visibility: visible;\r\n}\r\n`\r\n\r\nconst Button = styled.button`\r\nborder-radius: 5px;\r\nfont-size: 15px;\r\nborder: none;\r\nbackground: #F16436;\r\npadding: 10px;\r\nwidth: 150px;\r\nmargin-top: 15px;\r\ncolor: white;\r\n  &:hover{\r\n    color: white;\r\n    background-color: rgb(40,176,255);\r\n    transition: 150ms;\r\n  }\r\n  &:disabled {\r\n    cursor: not-allowed;\r\n    opacity: 0.7;\r\n  }\r\n`\r\n\r\nconst Button2 =styled(Button)`\r\nmargin-left: 15px;\r\n`\r\n\r\n\r\nconst Button3 = styled.button`\r\ndisplay: flex;\r\nalign-items: center;\r\ncolor: white;\r\ntext-decoration: none;\r\nmargin-left: 25px;\r\nborder: none;\r\nbackground: #F16436;\r\npadding: 13px 10px 10px 10px;\r\nfont-weight: bold;\r\nborder-radius: 10px;\r\nfont-size: 15px;\r\n  &:hover{\r\n    color: white;\r\n    background-color: rgb(40,176,255);\r\n    transition: 150ms;\r\n    span{\r\n    color: black;\r\n    transform: scale(1.3);\r\n    transition: 50ms;\r\n  }\r\n  }\r\n  p{\r\n    margin-left:10px\r\n  }\r\n`\r\n\r\nexport default CurrentProject;","/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/Spinner.js",[],"/Users/oliverbloj/Documents/Concordia BootCamp/36.1 WM 5.5.2022/WorkFlow_Management_APP/client/src/components/AdminNewTaskForm.js",["91"],"import React, {useState, useContext} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport backgroundImage from \"../assets/background2.png\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport EasyEdit, {Types} from 'react-easy-edit';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\n\r\nconst AdminNewTaskForm= () =>{\r\n  let navigate = useNavigate();\r\nconst {projectById,allUsers, updateTaskStatus, \r\n      setUpdateTaskStatus} = useContext(DataContext);\r\n\r\nconst [newProjectStatus, setNewProjectStatus] = useState(false);\r\nconst [responseObj, setResponseObj] = useState({});\r\n\r\nconst initialFormState = {\r\n    taskID:\"\",\r\n    assignedUsers:[],\r\n    taskName: \"\",\r\n    projectName: projectById !== null ? projectById.projectName : \"\", //this is fixed and cannot be edited as we create a task inside of current Project\r\n    dueDate: \"yyyy-mm-dd\",\r\n    details: \"\",\r\n    nbrDeliverables: \"\",\r\n    status: \"\",\r\n    comments: \"\" };\r\n\r\nconst [formData, setFormData] = useState(initialFormState);//Object state for storing form data from inputs\r\n\r\n//setting the key and values as what is written inside inputs, keeps the keys from initialStateForm that are not used (e.g. _id, type) because we use spread operator (...)\r\n// const handleChange = (value, name) =>{\r\n//   setFormData({...formData, [name]: value}); \r\n//  }\r\n\r\n//on submit we submit the New Task data tp the server\r\nfunction handleSubmit(ev){\r\n  ev.preventDefault();//prevents the page from refreshing if submit unsuccesfull\r\n  const settings = {\r\n    method: 'POST',\r\n    body: JSON.stringify(formData),\r\n    headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n    }}\r\nfetch(\"/tasks/newTask\", settings)\r\n.then((res)=>res.json())\r\n.then((response)=>{\r\nconsole.log(response)\r\n//const {status, message} = response; //deconstructing response's status to know if successfull or not\r\nsetResponseObj({status: response.status, message: response.message}); // setting the received response object in a state \r\nsetUpdateTaskStatus(!updateTaskStatus); //sets the status of update to the opposite of current value to trigger dependacy array of allTasks\r\n})\r\n.catch((error) => console.log(\"ERROR: \", error)); \r\n\r\n}\r\n\r\n//optionlist to select users for a task\r\nconst generateOptionsList = () => {\r\n  const optionsList =[];\r\n      allUsers.map((user)=>{\r\n        return optionsList.push({ label: user.firstName + \" \" + user.lastName,\r\n         value: user.firstName + \" \" + user.lastName})\r\n      })\r\n      return optionsList;\r\n    };\r\n\r\n    \r\n  // Drop Down Progress Menu option list\r\n  const options = [\r\n    { value: \"status\", label: \"Work in progress\" },\r\n    { value: \"status\", label: \"Submitted for review\" },\r\n    { value: \"status\", label: \"Started\" },\r\n  ];\r\n  \r\n    return (\r\n        <div style={{display: \"flex\"}}>\r\n          <Background />         \r\n          <Sidebar newProjectStatus={newProjectStatus} setNewProjectStatus={setNewProjectStatus}/>\r\n          <HomeWrapper>\r\n          <Wrapper>\r\n          {projectById !==null ? (\r\n            <FormWrapper onSubmit={handleSubmit}>\r\n              <h2 style={{\"marginBottom\": \"15px\",\"color\":\"#F16436\"}}>\r\n                Project {projectById.projectName} - New task</h2>\r\n\r\n          <div style={{display: \"flex\", alignItems:\"center\", marginBottom:\"10px\"}}>\r\n          <p style={{ marginRight: \"5px\"}}> Task Name: </p>\r\n          <Input type={\"text\"} \r\n              name=\"taskName\" \r\n              required \r\n              placeholder=\"Give your task a name\"\r\n              onChange={(ev)=> setFormData({...formData, taskName:ev.target.value })} /> \r\n        </div>\r\n\r\n          <span style={{ display:\"flex\", alignItems:\"center\", marginBottom:\"10px\"}}>\r\n            <p style={{ marginRight: \"5px\"}}> Due Date: </p>\r\n             <Div>\r\n              <EasyEdit\r\n              required\r\n              type={Types.DATE}\r\n              value={formData.dueDate}\r\n              onSave={(value) =>  setFormData({...formData, dueDate: value})}\r\n              saveButtonLabel={<FontAwesomeIcon icon={faCheck} />}\r\n              cancelButtonLabel={<FontAwesomeIcon icon={faTimes} />} />\r\n            </Div>\r\n          </span>\r\n\r\n          <div style={{display: \"flex\", alignItems:\"center\", marginBottom:\"10px\"}}>\r\n          <p style={{ marginRight: \"5px\"}}> Number of Deliverables: </p>\r\n          <Input type={\"text\"} \r\n              name=\"nbrDeliverables\" \r\n              required \r\n              placeholder=\"Specify a number\"\r\n              onChange={(ev)=> setFormData({...formData, nbrDeliverables:ev.target.value })} /> \r\n        </div>\r\n        \r\n        <div style={{display: \"flex\", alignItems:\"center\", marginBottom:\"10px\"}}>\r\n          <p style={{ marginRight: \"5px\"}}> Task Details: </p>\r\n          <Input type={\"text\"} \r\n              name=\"taskDetails\" \r\n              required \r\n              placeholder=\"Add some details\"\r\n              onChange={(ev)=> setFormData({...formData, details: ev.target.value })} /> \r\n        </div>\r\n        \r\n        <div style={{display: \"flex\", alignItems:\"center\", marginBottom:\"10px\"}}>\r\n          <p style={{ marginRight: \"5px\"}}> Comments: </p>\r\n          <Input type={\"text\"} \r\n              name=\"comments\" \r\n              placeholder=\"Optional comments\"\r\n              onChange={(ev)=> setFormData({...formData, comments:ev.target.value })} /> \r\n        </div>\r\n\r\n        <div style={{ display: \"flex\", alignItems:\"center\", marginBottom:\"10px\"}}>\r\n                       <p style={{marginRight: \"5px\"}}> Assigned Users: </p>\r\n                       <Div>\r\n                       <EasyEdit\r\n                       required\r\n                        type={Types.CHECKBOX}\r\n                        options={generateOptionsList()}\r\n                        onSave={(value) => {\r\n                          const splittedValues = value.toString().split(\",\");//value is an Object, we have to convert to String then split it\r\n                          const arrOfSplitted = splittedValues.map((el)=>{\r\n                            const splittedEl = el.split(\" \")//we have to split each element [\"john doe\"] to get [\"john\", \"doe\"]\r\n                            return {firstName: splittedEl[0], lastName: splittedEl[1]}\r\n                          });\r\n                          return (\r\n                          setFormData({ ...formData, assignedUsers: arrOfSplitted//[{firstName: splittedValue[0], lastName: splittedValue[1]}]\r\n                                      }))\r\n                          }}\r\n                         value={formData.assignedUsers.length !== 0 ?\r\n                          formData.assignedUsers.map((usr)=>{\r\n                            return(`${usr.firstName + \" \" + usr.lastName}`)\r\n                          })  : [\"Add users to this task\"]} // \r\n                        />\r\n                        </Div>\r\n         </div>\r\n\r\n        <div>\r\n        <SubmitInput type=\"submit\" value=\"Create New Task\"/>\r\n        </div>\r\n    <div>\r\n        {responseObj.status !== 201 ? \r\n        ( <>\r\n        <h3 style={{\"marginTop\": \"10px\",\"color\":\"#D80026\", \r\n        \"fontSize\":\"15px\", \"textAlign\":\"center\"}} >{responseObj.message}</h3>\r\n        </>\r\n        ) : (\r\n            <>\r\n            <h3 style={{\"marginTop\": \"10px\",\"color\":\"#D80026\", \r\n            \"fontSize\":\"15px\", \"textAlign\":\"center\"}} >{responseObj.message}</h3>\r\n            <p style={{\"marginTop\": \"10px\",\"color\":\"#D80026\", \r\n            \"fontSize\":\"15px\", \"textAlign\":\"center\"}}>\r\n            Go back to <NavLink to={`/adminHome/myProjects/${projectById._id}`}>\r\n             <b>{projectById.projectName}</b> \r\n            </NavLink>\r\n            </p>\r\n            </>\r\n        )\r\n        }\r\n    </div>\r\n            </FormWrapper>\r\n          ):(\r\n            //if page refreshes we use this message to indicate admin is logged out\r\n          <div style ={{\"width\" : \"600px\", \"position\" : \"absolute\", \"top\" :\"50%\" , \"left\" :\"30%\" }}>\r\n          <Title style={{\"textAlign\":\"center\", \"borderRadius\" :\"10px\", \"padding\":\"10px\",\r\n          \"background\" :\"red\", \r\n          }}>Admin signed out, go back to login page!\r\n          <button \r\n          style ={{\"border\" : \"none\", \"padding\":\"7px\", \"borderRadius\": \"10px\", \"background\":\"#28B0FF\", \"color\":\"white\"}}\r\n          onClick={()=> navigate(\"/adminLogin\")}><b>Go to Login</b></button></Title>\r\n          </div>\r\n          )\r\n          \r\n          }\r\n        </Wrapper>\r\n        </HomeWrapper>\r\n    </div>\r\n\r\n    );\r\n  }\r\n\r\n  const Wrapper = styled.div`\r\n      margin: 25px ;\r\n      font-size: 16px;\r\n    `\r\n    \r\n    const FormWrapper = styled.form`\r\n    border-radius: 10px; \r\n    display: flex;\r\n    flex-direction: column;\r\n    /* border: 4px solid #42c99d; */\r\n    background: #DDEDEC;\r\n    width: 100%;\r\n    height: 100%;\r\n    `\r\n      const HomeWrapper = styled.div`\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items:flex-start;\r\n      width: 900px;\r\n      margin: 50px;\r\n      background: rgba(221, 237, 236, 1);\r\n      border-radius: 5px;\r\n      `\r\n    \r\n    const Div= styled.div`\r\n    border: none;\r\n    background: #42c99d;\r\n    padding:5px;\r\n    border-radius: 10px; \r\n    `\r\n        \r\n    const Input= styled.input`\r\n    border: none;\r\n    background: #42c99d;\r\n    font-size: 16px;\r\n    height: 35px;\r\n    padding:5px;\r\n    border-radius: 10px; \r\n        `\r\n    \r\n  const SubmitInput = styled.input`\r\n  color: white;\r\n  font-weight: bold;\r\n  padding: 12px 35px 12px 35px;\r\n  margin: 10px 0px 0px -5px;\r\n  text-align: center;\r\n  border: none;\r\n  border-radius: 10px;\r\n  background:  #F16436;\r\n  /* &.active{\r\n    color: white;\r\n  } */\r\n  &:hover{\r\n    color: white;\r\n    background-color: rgb(40,176,255);\r\n    transition: 150ms;\r\n  }\r\n  `\r\n\r\n\r\nconst Background = styled.div`\r\nz-index: -1;\r\nbackground-image: url(${backgroundImage});\r\nposition: absolute; \r\nmin-width: 100%;\r\nmin-height: 140%;\r\nbackground-repeat: no-repeat;\r\nbackground-size: cover;\r\nbackground-position: center;\r\n`\r\n\r\nconst Title = styled.h1`\r\nfont-size: 25px;\r\nmargin-top: 2%;\r\nmargin-left: 3%;\r\n`\r\n\r\n\r\n  export default AdminNewTaskForm;",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":5,"column":8,"nodeType":"98","messageId":"99","endLine":5,"endColumn":22},{"ruleId":"100","severity":1,"message":"101","line":53,"column":6,"nodeType":"102","endLine":53,"endColumn":8,"suggestions":"103"},{"ruleId":"96","severity":1,"message":"104","line":62,"column":17,"nodeType":"98","messageId":"99","endLine":62,"endColumn":23},{"ruleId":"105","severity":1,"message":"106","line":216,"column":1,"nodeType":"107","messageId":"108","endLine":224,"endColumn":2},{"ruleId":"96","severity":1,"message":"109","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":19},{"ruleId":"96","severity":1,"message":"110","line":7,"column":10,"nodeType":"98","messageId":"99","endLine":7,"endColumn":17},{"ruleId":"100","severity":1,"message":"111","line":55,"column":6,"nodeType":"102","endLine":55,"endColumn":24,"suggestions":"112"},{"ruleId":"96","severity":1,"message":"113","line":393,"column":7,"nodeType":"98","messageId":"99","endLine":393,"endColumn":17},{"ruleId":"96","severity":1,"message":"114","line":71,"column":9,"nodeType":"98","messageId":"99","endLine":71,"endColumn":16},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'ResponsiveGrid' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setAdmin' and 'setStatus'. Either include them or remove the dependency array.","ArrayExpression",["117"],"'status' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'GlobalStyle' is defined but never used.","'NavLink' is defined but never used.","React Hook useEffect has missing dependencies: '_id', 'allTasks', and 'setProjectById'. Either include them or remove the dependency array.",["118"],"'ListedItem' is assigned a value but never used.","'options' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [setAdmin, setStatus]",{"range":"123","text":"124"},"Update the dependencies array to be: [_id, allTasks, setProjectById, updateTaskStatus]",{"range":"125","text":"126"},[2165,2167],"[setAdmin, setStatus]",[2398,2416],"[_id, allTasks, setProjectById, updateTaskStatus]"]